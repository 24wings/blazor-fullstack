@inject HttpClient httpClient
@inject CompanyService companyService
@using OneOf;
<Modal Title="@(isUpdate?"更新公司":"新增公司")"
       Visible="@_visible"
       OnOk="@HandleOk"
       OnCancel="@HandleCancel">
    <Form Model="@company"
          LabelCol="new ColLayoutParam { Span = 8 }"
          WrapperCol="new ColLayoutParam { Span = 16 }"
          OnFinish="OnFinish"
          OnFinishFailed="OnFinishFailed" @ref="editForm">
        @if (company.id != 0)
        {
            <FormItem Label="id">
                @(context.id)
            </FormItem>
        }

        <FormItem Label="公司名称">
            <Input @bind-Value="@context.name" />
        </FormItem>

        <FormItem Label="公司代码">
            <Input @bind-Value="@context.code" />
        </FormItem>
        <FormItem Label="公司描述">
            <Input @bind-Value="@context.description" />
        </FormItem>
        
        <FormItem Label="审核状态">

            <RadioGroup @bind-Value="@context.status">
                <Radio Value="1">已提交</Radio>
                <Radio Value="2">已同意</Radio>
                <Radio Value="3">通过</Radio>
            </RadioGroup>
        </FormItem>




    </Form>
</Modal>

@code {
    public string status;
    [Parameter]
    public EventCallback<Company> onSave { get; set; }

    Form<Company> editForm;
    Company company = new Company();
    RbacMenuModel rbacMenuModel = new RbacMenuModel();
    bool isUpdate;
    [Parameter]
    public bool _visible { get; set; } = false;
    void OnChange(OneOf<string, IEnumerable<string>, LabeledValue, IEnumerable<LabeledValue>> value, OneOf<SelectOption, IEnumerable<SelectOption>> option)
    {
        var valueString = value.Value+"";
        if (string.IsNullOrEmpty(value.ToString()))
        {

        }
        else
        {
            company.status = (CompanyStatus)int.Parse(value.ToString());
        }

    }

    private void HandleOk(MouseEventArgs e)
    {
        editForm.Submit();
    }

    private async Task OnFinish(EditContext editContext)
    {
        if (editContext.Validate())
        {
            await companyService.insert(company);
            //await httpClient.PostJsonAsync<RbacMenuModel>("/api/RbacMenu/insert", rbacMenuModel);
            _visible = false;
            await onSave.InvokeAsync(company);
        }
        else
        {
            _visible = true;
        }
        StateHasChanged();
    }
    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(company)}");
    }

    private void HandleCancel(MouseEventArgs e)
    {
        Console.WriteLine(e);
        _visible = false;
    }





    public void show(Company company)
    {
        isUpdate = true;
        _visible = true;
        StateHasChanged();
    }

    public void show()
    {
        company = new Company();
        isUpdate = false;
        _visible = true;
        StateHasChanged();
    }
}
