@inject MenuService menuService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
<Sider Collapsible Collapsed=@collapsed NoTrigger OnCollapse="OnCollapse">
    <div class="logo">
        <img src="/images/avatar.jpg" alt="Logo" />
    </div>
    <Menu Theme="MenuTheme.Dark" Mode="MenuMode.Inline" DefaultSelectedKeys=@(new[]{"1"})>
        @foreach (var menu in menus)
        {

            <SubMenu Key="@(menu.id.ToString())" Title="menu.text">
                @foreach (var subMenu in menu.childrens)
                {
                    <MenuItem RouterLink="@(subMenu.link)">
                        <Icon Type="user" Theme="outline" />
                        <span>@(subMenu.text)</span>
                    </MenuItem>
                }

            </SubMenu>
        }


    </Menu>
</Sider>

<style>



    .ant-layout-sider.ant-layout-sider-dark.ant-layout-sider-has-trigger {
        min-height: 100vh;
    }

    .logo {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 64px;
    }

        .logo > img {
            width: 40px;
            height: 40px;
            border-radius: 50%;
        }

    #components-layout-demo-custom-trigger .logo {
        height: 64px;
        background: rgba(255, 255, 255, 0.2);
    }
</style>

@code {
    [Parameter]
    public bool collapsed { get; set; } = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await refresh();
        }


    }
    public async Task refresh()
    {
        var state = await ((ApiAuthenticationStateProvider)AuthenticationStateProvider).GetAuthenticationStateAsync();
        if (state.User.Identity.IsAuthenticated)
        {
            var myMenus = await menuService.loadMyMenusAsync();
            menus = myMenus;
            StateHasChanged();
        }



    }

    public List<MyMenu> menus { get; set; } = new List<MyMenu>();



    void ToggleCollapsed()
    {
        collapsed = !collapsed;
    }
    void OnCollapse(bool isCollapsed)
    {
        Console.WriteLine($"Collapsed: {isCollapsed}");


    }

    void toggle()
    {
        collapsed = !collapsed;
    }

}